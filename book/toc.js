// Populate the sidebar
//
// This is a script, and not included directly in the page, to control the total size of the book.
// The TOC contains an entry for each page, so if each page includes a copy of the TOC,
// the total size of the page becomes O(n**2).
class MDBookSidebarScrollbox extends HTMLElement {
    constructor() {
        super();
    }
    connectedCallback() {
        this.innerHTML = '<ol class="chapter"><li class="chapter-item expanded affix "><a href="index.html">Introduction</a></li><li class="chapter-item expanded affix "><li class="spacer"></li><li class="chapter-item expanded affix "><li class="part-title">User Guide</li><li class="chapter-item expanded "><a href="guide/installation.html"><strong aria-hidden="true">1.</strong> Installation</a></li><li class="chapter-item expanded "><a href="guide/reading.html"><strong aria-hidden="true">2.</strong> Reading Books</a></li><li class="chapter-item expanded "><a href="guide/creating.html"><strong aria-hidden="true">3.</strong> Creating a Book</a></li><li class="chapter-item expanded affix "><li class="spacer"></li><li class="chapter-item expanded affix "><li class="part-title">PART 1 — Foundations</li><li class="chapter-item expanded "><div><strong aria-hidden="true">4.</strong> Introduction to Cryptography &amp; Rust</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">5.</strong> What is cryptography?</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">6.</strong> What makes Rust a good fit?</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">7.</strong> The importance of correctness &amp; memory safety</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">8.</strong> The Language of Secrets: Basic Terminology</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">9.</strong> Confidentiality, integrity, authenticity</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">10.</strong> Adversary models, threat models, attacker capabilities</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">11.</strong> Math Primer for Cryptographers</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">12.</strong> Modular arithmetic</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">13.</strong> Prime numbers &amp; GCD</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">14.</strong> Groups, rings, fields (intro only, not academic overkill)</div></li><li class="chapter-item expanded affix "><li class="part-title">PART 2 — Classical Ciphers &amp; First Code</li><li class="chapter-item expanded "><div><strong aria-hidden="true">15.</strong> From Caesar to Vigenère: Classical Algorithms</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">16.</strong> Historical context + Rust implementation</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">17.</strong> Frequency analysis</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">18.</strong> Code: cracking Caesar &amp; substitution ciphers</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">19.</strong> Modern Attacks on Classical Ciphers</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">20.</strong> Why these are broken</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">21.</strong> Key reuse, predictability</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">22.</strong> Transition to modern crypto</div></li><li class="chapter-item expanded affix "><li class="part-title">PART 3 — Symmetric Cryptography</li><li class="chapter-item expanded "><div><strong aria-hidden="true">23.</strong> The Magic of XOR</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">24.</strong> Properties</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">25.</strong> One-Time Pad</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">26.</strong> Rust: custom XOR stream cipher</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">27.</strong> Block Ciphers: Building Blocks</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">28.</strong> Feistel networks, Substitution-Permutation Networks</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">29.</strong> Code: simplified DES / mini-AES for illustration</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">30.</strong> AES and Block Cipher Modes</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">31.</strong> ECB, CBC, CTR, GCM</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">32.</strong> Rust: aes, cipher, block-modes crates</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">33.</strong> Code: encrypt/decrypt with proper mode handling</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">34.</strong> Authenticated Encryption</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">35.</strong> AEAD explained</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">36.</strong> Rust: aes-gcm, chacha20poly1305</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">37.</strong> Code: secure file/message encryption</div></li><li class="chapter-item expanded affix "><li class="part-title">PART 4 — Hashing &amp; Integrity</li><li class="chapter-item expanded "><div><strong aria-hidden="true">38.</strong> Cryptographic Hash Functions</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">39.</strong> Properties: preimage, collision resistance</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">40.</strong> Rust: sha2, blake3</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">41.</strong> Code: password hashing, file integrity checker</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">42.</strong> Message Authentication Codes (MACs)</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">43.</strong> HMAC, CMAC</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">44.</strong> Rust: hmac, crypto-mac</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">45.</strong> Code: simple API message verifier</div></li><li class="chapter-item expanded affix "><li class="part-title">PART 5 — Asymmetric Cryptography</li><li class="chapter-item expanded "><div><strong aria-hidden="true">46.</strong> Public Key Cryptography 101</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">47.</strong> Key pairs, trapdoor functions</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">48.</strong> Diffie-Hellman explained visually</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">49.</strong> RSA: Theory and Rust</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">50.</strong> Math background (modular exponentiation, totients)</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">51.</strong> Code: DIY RSA in Rust, then compare to crate</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">52.</strong> Elliptic Curve Cryptography</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">53.</strong> Why ECC? High-level curve intuition</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">54.</strong> Rust: curve25519-dalek, p256</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">55.</strong> Code: generate and exchange keys</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">56.</strong> Digital Signatures</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">57.</strong> RSA &amp; ECDSA signatures</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">58.</strong> Rust: ed25519-dalek, rsa crate</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">59.</strong> Code: verify and sign documents</div></li><li class="chapter-item expanded affix "><li class="part-title">PART 6 — Applications &amp; Design</li><li class="chapter-item expanded "><div><strong aria-hidden="true">60.</strong> Key Derivation Functions</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">61.</strong> KDFs, PBKDF2, scrypt, Argon2</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">62.</strong> Rust: argon2, ring</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">63.</strong> Code: password-based key generation</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">64.</strong> Randomness &amp; Entropy</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">65.</strong> Secure RNGs, nonces, IVs</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">66.</strong> Rust: rand_core, getrandom, ring</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">67.</strong> Secure Design Principles</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">68.</strong> Don&#39;t roll your own crypto</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">69.</strong> Common pitfalls</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">70.</strong> Rust-specific safety techniques</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">71.</strong> 18.5 Merkle Trees &amp; Blockchain Primitives</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">72.</strong> Build a Merkle Tree in Rust</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">73.</strong> Use SHA-256, Keccak</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">74.</strong> Explain transaction integrity</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">75.</strong> secp256k1 and Crypto in Blockchain</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">76.</strong> Key generation, message signing</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">77.</strong> Crates: k256, libsecp256k1</div></li><li class="chapter-item expanded affix "><li class="part-title">PART 7 — Advanced Topics</li><li class="chapter-item expanded "><div><strong aria-hidden="true">78.</strong> Zero-Knowledge Proofs (Intro)</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">79.</strong> What they are, why they matter</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">80.</strong> Link to zk-SNARKS, but no deep dive</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">81.</strong> Post-Quantum Cryptography</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">82.</strong> Lattices, NTRU, Kyber</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">83.</strong> Rust: reference Kyber implementation overview</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">84.</strong> 20. Zero-Knowledge Proofs (Deep Dive)</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">85.</strong>  zk-SNARKs vs zk-STARKs</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">86.</strong> Tools: bellman, circom, halo2</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">87.</strong> 21. Post-Quantum Cryptography</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">88.</strong>     Kyber, Dilithium, Falcon</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">89.</strong>     Rust: pqcrypto, kyber crate</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">90.</strong> 22. Lightweight Cryptography for Embedded</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">91.</strong>     Ascon, PRESENT</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">92.</strong>     Code: implement toy cipher with embedded constraints</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">93.</strong> 23. Side-Channel Attacks &amp; Constant-Time Rust</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">94.</strong>     Code: benchmark constant-time XOR vs unsafe one</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">95.</strong>     Tools: criterion, valgrind</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">96.</strong> 24. Cryptography for Secure Boot &amp; Firmware</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">97.</strong>     Overview: signature chains</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">98.</strong>     Code: simulate signed firmware verification</div></li><li class="chapter-item expanded affix "><li class="part-title">PART 8 — Your Own Crypto Crate</li><li class="chapter-item expanded "><div><strong aria-hidden="true">99.</strong> Designing Your First Crypto Crate</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">100.</strong> Architecture</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">101.</strong> Docs, tests, benchmarks</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">102.</strong> Code: A mini symmetric cipher with Rust idioms</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">103.</strong> Fuzzing, Auditing &amp; Publishing</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">104.</strong> cargo-fuzz, Clippy, criterion</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">105.</strong> Audit checklists</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">106.</strong> Crate publishing &amp; security considerations</div></li><li class="chapter-item expanded affix "><li class="part-title">Appendices</li><li class="chapter-item expanded "><div><strong aria-hidden="true">107.</strong> A. Glossary of Terms</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">108.</strong> B. List of Rust Crypto Crates (by category)</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">109.</strong> C. Suggested Reading &amp; Further Learning</div></li><li class="chapter-item expanded "><div><strong aria-hidden="true">110.</strong> D. Crate: rust_crypto_book_code structure</div></li><li class="chapter-item expanded "><a href="nested/index.html"><strong aria-hidden="true">111.</strong> Nested example</a></li><li class="chapter-item expanded "><a href="nested/sub-chapter.html"><strong aria-hidden="true">112.</strong> Subchapter</a></li><li class="chapter-item expanded affix "><li class="spacer"></li><li class="chapter-item expanded affix "><li class="part-title">Summary2</li><li class="chapter-item expanded "><a href="relative/path/to/markdown.html"><strong aria-hidden="true">113.</strong> First Chapter</a></li><li class="chapter-item expanded "><a href="relative/path/to/markdown2.html"><strong aria-hidden="true">114.</strong> Second Chapter</a></li><li class="chapter-item expanded "><div><strong aria-hidden="true">115.</strong> Draft Chapter</div></li><li class="chapter-item expanded "><a href="my-first-chapter.html"><strong aria-hidden="true">116.</strong> My First Chapter</a></li><li class="chapter-item expanded affix "><li class="spacer"></li><li class="chapter-item expanded affix "><a href="misc/contributors.html">Contributors</a></li></ol>';
        // Set the current, active page, and reveal it if it's hidden
        let current_page = document.location.href.toString().split("#")[0].split("?")[0];
        if (current_page.endsWith("/")) {
            current_page += "index.html";
        }
        var links = Array.prototype.slice.call(this.querySelectorAll("a"));
        var l = links.length;
        for (var i = 0; i < l; ++i) {
            var link = links[i];
            var href = link.getAttribute("href");
            if (href && !href.startsWith("#") && !/^(?:[a-z+]+:)?\/\//.test(href)) {
                link.href = path_to_root + href;
            }
            // The "index" page is supposed to alias the first chapter in the book.
            if (link.href === current_page || (i === 0 && path_to_root === "" && current_page.endsWith("/index.html"))) {
                link.classList.add("active");
                var parent = link.parentElement;
                if (parent && parent.classList.contains("chapter-item")) {
                    parent.classList.add("expanded");
                }
                while (parent) {
                    if (parent.tagName === "LI" && parent.previousElementSibling) {
                        if (parent.previousElementSibling.classList.contains("chapter-item")) {
                            parent.previousElementSibling.classList.add("expanded");
                        }
                    }
                    parent = parent.parentElement;
                }
            }
        }
        // Track and set sidebar scroll position
        this.addEventListener('click', function(e) {
            if (e.target.tagName === 'A') {
                sessionStorage.setItem('sidebar-scroll', this.scrollTop);
            }
        }, { passive: true });
        var sidebarScrollTop = sessionStorage.getItem('sidebar-scroll');
        sessionStorage.removeItem('sidebar-scroll');
        if (sidebarScrollTop) {
            // preserve sidebar scroll position when navigating via links within sidebar
            this.scrollTop = sidebarScrollTop;
        } else {
            // scroll sidebar to current active section when navigating via "next/previous chapter" buttons
            var activeSection = document.querySelector('#sidebar .active');
            if (activeSection) {
                activeSection.scrollIntoView({ block: 'center' });
            }
        }
        // Toggle buttons
        var sidebarAnchorToggles = document.querySelectorAll('#sidebar a.toggle');
        function toggleSection(ev) {
            ev.currentTarget.parentElement.classList.toggle('expanded');
        }
        Array.from(sidebarAnchorToggles).forEach(function (el) {
            el.addEventListener('click', toggleSection);
        });
    }
}
window.customElements.define("mdbook-sidebar-scrollbox", MDBookSidebarScrollbox);
